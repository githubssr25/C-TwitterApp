// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyBackendApp.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MyBackendApp.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240620112931_ConfigureUserMentions")]
    partial class ConfigureUserMentions
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HashtagTweet", b =>
                {
                    b.Property<long>("HashtagsId")
                        .HasColumnType("bigint");

                    b.Property<long>("TweetsId")
                        .HasColumnType("bigint");

                    b.HasKey("HashtagsId", "TweetsId");

                    b.HasIndex("TweetsId");

                    b.ToTable("HashtagTweet");
                });

            modelBuilder.Entity("MyBackendApp.Entities.Hashtag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("FirstUsed")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("LastUsed")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Hashtags");
                });

            modelBuilder.Entity("MyBackendApp.Entities.Tweet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AuthorId")
                        .HasColumnType("bigint");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<long?>("InReplyToId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Posted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("RepostOfId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("InReplyToId");

                    b.HasIndex("RepostOfId");

                    b.ToTable("tweet");
                });

            modelBuilder.Entity("MyBackendApp.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Joined")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("user_account");
                });

            modelBuilder.Entity("TweetUser", b =>
                {
                    b.Property<long>("LikedByUsersId")
                        .HasColumnType("bigint");

                    b.Property<long>("LikedTweetsId")
                        .HasColumnType("bigint");

                    b.HasKey("LikedByUsersId", "LikedTweetsId");

                    b.HasIndex("LikedTweetsId");

                    b.ToTable("user_likes", (string)null);
                });

            modelBuilder.Entity("followers_following", b =>
                {
                    b.Property<long>("FollowerId")
                        .HasColumnType("bigint");

                    b.Property<long>("FollowingId")
                        .HasColumnType("bigint");

                    b.HasKey("FollowerId", "FollowingId");

                    b.HasIndex("FollowingId");

                    b.ToTable("followers_following", (string)null);
                });

            modelBuilder.Entity("user_mentions", b =>
                {
                    b.Property<long>("MentionedUsersId")
                        .HasColumnType("bigint");

                    b.Property<long>("MentionedTweetsId")
                        .HasColumnType("bigint");

                    b.HasKey("MentionedUsersId", "MentionedTweetsId");

                    b.HasIndex("MentionedTweetsId");

                    b.ToTable("user_mentions", (string)null);
                });

            modelBuilder.Entity("HashtagTweet", b =>
                {
                    b.HasOne("MyBackendApp.Entities.Hashtag", null)
                        .WithMany()
                        .HasForeignKey("HashtagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyBackendApp.Entities.Tweet", null)
                        .WithMany()
                        .HasForeignKey("TweetsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyBackendApp.Entities.Tweet", b =>
                {
                    b.HasOne("MyBackendApp.Entities.User", "Author")
                        .WithMany("Tweets")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MyBackendApp.Entities.Tweet", "InReplyTo")
                        .WithMany()
                        .HasForeignKey("InReplyToId");

                    b.HasOne("MyBackendApp.Entities.Tweet", "RepostOf")
                        .WithMany()
                        .HasForeignKey("RepostOfId");

                    b.Navigation("Author");

                    b.Navigation("InReplyTo");

                    b.Navigation("RepostOf");
                });

            modelBuilder.Entity("MyBackendApp.Entities.User", b =>
                {
                    b.OwnsOne("MyBackendApp.Entities.Credentials", "Credentials", b1 =>
                        {
                            b1.Property<long>("UserId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Password")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Username")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("UserId");

                            b1.ToTable("user_account");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("MyBackendApp.Entities.Profile", "Profile", b1 =>
                        {
                            b1.Property<long>("UserId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Phone")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("UserId");

                            b1.ToTable("user_account");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Credentials")
                        .IsRequired();

                    b.Navigation("Profile")
                        .IsRequired();
                });

            modelBuilder.Entity("TweetUser", b =>
                {
                    b.HasOne("MyBackendApp.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("LikedByUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyBackendApp.Entities.Tweet", null)
                        .WithMany()
                        .HasForeignKey("LikedTweetsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("followers_following", b =>
                {
                    b.HasOne("MyBackendApp.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("FollowerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MyBackendApp.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("FollowingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("user_mentions", b =>
                {
                    b.HasOne("MyBackendApp.Entities.Tweet", null)
                        .WithMany()
                        .HasForeignKey("MentionedTweetsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyBackendApp.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("MentionedUsersId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MyBackendApp.Entities.User", b =>
                {
                    b.Navigation("Tweets");
                });
#pragma warning restore 612, 618
        }
    }
}
